// @Auther Hwi Jun KIM. euler.bonjour@gmail.com
// See License.txt for license of this code.

氏名：金 輝俊 / Hwi Jun KIM
Email: euler.bonjour@gmail.com
作成日付: 2017/5/15（2017/7/14追記）

序説及び、注釈

簡単に言ってしまうと、本プログラムは基本的にクイックハックであり、あまり完成度は高くない。しかし、ある程度、アプリケーションをいかにpluggableに作るか、という考えの一旦が見えるのではないか、と思い公開する。

また、そもそも、Scaffoldなど開発効率を高めるための工夫をなぜ入れたかは以下のドキュメントで解説している。

なぜ、1. 戦略コンサルタント、2. ITコンサルタント、3. SIのプロジェクトマネージャー / アーキテクト、あるいは4. 事業会社のIT部門か？
https://docs.google.com/document/d/1zWH0Isx0HKe0wD5xfrzrBgrfUrRc8PdMjBlNlsV93kc/edit

以下のドキュメントの「プログラマ、Systems Architect or Project Manager（コンサル/SI or 事業会社IT部門）」の項を参照の事：
経歴書 (Curriculum Vitae)
https://docs.google.com/document/d/1czBVntPBhOBG9KUvkWADlS716BDI92I_lu2ll0eFWj4/edit

以下、ライセンスについての注釈となる。また、このコードはある企業への採用試験への提出物をベースにしている。しかし、

1. このコードのライセンスは当初、すなわち、上記のある企業への提出前から筆者が抑えていて、かつ、いかなる第三者との契約に関する制限もなく、また、いかなる種類の仕事上の成果物では無い事を念頭に、公開するのは自身の自由という事をお断りしておく。

2. また、対象企業特有のファイルは全て消してある。したがって、ある程度commit logなどにオリジナルのものとずれが生じている可能性がある事をお断りしておく。

3. そもそも論、コードやライブラリの設計は筆者の考え方に基づくものであり、この考え方の源流は少なくとも、2012年時点までに遡ることができる。ライセンスなど法的な事を考えても公開は合法であると考えるが、先に述べたように、どこに迷惑をかけるわけでもない、かつ、金銭が関わるか否かに関係なく、仕事上の成果物でないと考える。それを言い出すと、プログラマはいかなるコードもいかなるライセンス種別で公開できないと考える。また、先方に断りを入れてある。

別の視点で述べると多少トリッキーな主張であるという見方があるであろう事は認めるが、IT業界、特にWeb業界がGPLやBSD Licenseの成果物やDesign Patternなどの過去の成果物あるいは古典、そして、経験の結果得られたプログラマの暗黙知に頼っている事を考えると、この主張は妥当ではないかと考える。

筆者のライセンスに対する考え方は以下のドキュメントに記述してある：

https://docs.google.com/document/d/1DOS8hw5K8k4iM7XhG2_RSwjhyOC2Yi8pRXynIhCYF7s/edit

以上でライセンスに対する注釈を終わる。以下、本リポジトリに含まれるプログラムの解説となる。

本論

1. 本ディレクトリに含まれるプログラムの設計とマズい点についての解説

本プログラムではある一定フォーマットのRSSを処理して、適切なデータ処理をする事を目的とする。具体的には単なる文字列の検索/置換の問題となる。しかしながら、出入力の柔軟性や元のRSSデータに対するある程度の柔軟性を保つように、単なる書き捨てのスクリプトでなく、ある程度プラガブルに作った。



しかし、いくつか問題点がある
1. PHPの既存のXMLパーサーに対する誤解。ここはXMLパーサーがどんな処理をしても、完全に一般的な仕様を満たせないので、本来なら、パーサーごと、自作するべきであった。しかし、この時は時間の制約のため、不完全な仕様で終わった。具体的には柔軟性を保つために、程度アダプターを作ったが、元ライブラリの制限上、上記のような結果となる。また、アダプターのクラスのI/Fもある程度、元のライブラリに引きずられ、抽象化の度合いが低い。

2. また、標準エラー出力や標準出力もアダプターを作り抽象化の度合いを上げ、ダイナミックに出力を変更できるようにする予定であったが、時間の制約上、普通の処理で終わらせた。ただし、OutputHandlerなどで、高次の抽象化はしてある。

以下、プログラムの説明と、より詳細な設計について述べる

2. プログラムについて

プログラムとして、以下のディレクトリに格納。bin以下のphpファイルを実行の事。
bin/, lib/, unit_test/, util/

以下のようなコマンドをbin/ディレクトリで実行すると当該問題の出力結果を得る
php RSSesConverterBatch.php  Foo Replaced 

・実装環境
言語：PHP5.4.16
フレームワーク：特になし

3. クラス構成
以下にクラス構成図を示す。基本的には全てインスタンスを表す。例えば、RSSはRSSクラスのインスタンスを意味する。

・RSS周りの処理クラスとインスタンス関係図（だいたい）
RSSesConverterBatch <=inherit= BaseBatch =manipulate=> BaseErrorHandler
↓ manipulate
RSSesConverter =manipulate=> BaseOutputHandler
↓ manipulate
RSS =has a=> RSSElement =has a=> DOMElement
↓ hasa
DOMDocument

入力、出力の変更は基本的にobjecctのインジェクションを行う事によって、柔軟に変更できるように設計している。より柔軟性を保つのであれば、Factoryなどを作ることになると思う。

BaseBatch: いわゆるmain関数（static void main()的な）ものを定義するとこ。エラーハンドリングなどはBaseBatchで定義され、このサブクラスで実際の処理を書く。

BaseOutputHandler => 出力関係。テキストファイルに保存するなどの要求が出たら、このサブクラスを作り、入れ替えればいい。
BaseErrorHandler => エラーハンドリング関係。ほぼ、エラーも含めて、例外で処理するにょうになっているはず。簡易フレームワークになっているので、エラーハンドリングの方法を変えたければBaseErrorHandlerを変更すればよい。Factoryなどを作ればダイナミックに変更も可能。

入力RSSを複数にするのは可能。RSSesConverterを参照。基本的にはRSSクラスのインスタンスをRSSesConveterでいじっているので、多少コードを変更すればいい。ここも変換方法をプラガブルに変更可能のようにできるかと思う。（単に同一インターフェースのクラスを作ればいい）

has a、manipualteともにあるクラスのインスタンスが対象クラスのインスタンスをインスタンス変数に保持しているという関係性については同じだが、has aは基本的にdelegate的な関係を示し、manipulateはどちらかというと、Contrller/Action内でmodelを操作する関係性に近い。

しかし、has a、manipulate両者とも、object compositionが継承よりも有利あるいは扱いやすく柔軟性に富むのでは、という発想に基づいて使用されている。意味的な相違は上述の通りである

4. 基本ライブラリ（だいたいの説明）
Env(環境情報あるいはグローバルで扱われがちなオブジェクトを保持する。ただし、グローバルアクセスはありえない、という前提である)
Util（いわゆるワンライナー的なユーティリティ関数の集合。staticで実装。クラスは単なる名前空間として使っている）
UEzception（例外のラッパー）
BaseErrorHandler（エラー処理に責務を負うクラス。場合によってはstderr、場合によってはファイルに書き出す）
BaseUnitTest（簡易な単体テストのための既定クラス。method名によって、どのテストケースを処理するのかのみを実装している。assertなどは特に実装していない）


5. 実装方針と説明
node valueなどの問題は残る。（これは内部で使っているライブラリの仕様上、不可避だと考える。しかし、全て仕様を満たしつつ、処理も適切にするなら、単にhtml special chars decodeの結果をstr_replace()すればいい。別にどっちでもいい）

今回はPHPのXMLパーサーの仕様の勘違いと当該RSSを一般化しすぎて考えたので、オーバーエンジニアリングなコードとライブラリとなった。

今回はXMLを再帰的に処理して（XMLが木構図のため。この考えはRSSConverterのコードに見て取れる。提出のbatchでは未使用）、全てのinner html的なものを置換する予定であった。

仕様を完全に満たすのは簡易な実装（str_replaceを内部のHTMLにかける）であるが、より柔軟性あるいは正確性を求めるべきと考え、上記実装を試みた。しかし、上述のとおり、内部で使っているPHPのDOMDocument関連の仕様の制限上、完全に仕様を満たすのは難しいという見解である

前述の正確性とは例えば、検索/置換体調の文字列がタグに含まれる場合、単なるstr_replaceでは正確には実行できない。

したがって、今回の言語環境あるいは知っているライブラリの制限を考えるならば、自前でXML/HTMLパーサーを書くべきだったかもしれないが、それはさすがに予期せず、今回はこういう結果になった。


プロダクション環境で実際に使用するコードであるならば、上述のタグ/本文での検索対象文字列の問題が仮に対象文章(rssあるいはHTML)にないと仮定するなら、単純なstr_replaceの実装で行う。

しかし、そうでなく、かつ、ある程度時間が取れるならば、簡易なHTMLあるいはXMLのパーサーのサブセットを作成する可能性が高い。しかし、あくまでも時間あるいは人的コストとそれによって、サービスに加わる価値などを総合的に判断しての事となるかと思う。

しかしながら、検索/置換対象が単なるHTMLなので、その場合は上記の考えは単なる杞憂で仕様の理解を間違っているという事もできる。しかしながら、内容が任意のXMLであれば、上記の仮定は正しい。


6. 参考文献 (URL）
http://qiita.com/mpyw/items/c0312271819baee09132
-- DOMと文字列操作の例があるが、この例をそのまま使用するとネストしたタグの内部のテキストをきちんと検索/置換するのは難しい気がする。しかしながら、それは筆者の認識不足の可能性もある。

http://php.net/manual/ja/class.domtext.php
-- NodeTextとかでDOM node内部の検索置換をうまくやれるっぽいサンプルコードがあるが、既存のテキストからDOMDocumentを作成して、そこからDOM nodeあるいはDOM Elementを取り出した場合はおそらく、このURLのサンプルコードは動かないのでは？あるいは筆者の見識不足かもしれない。

以上
